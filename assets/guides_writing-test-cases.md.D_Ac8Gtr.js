import{_ as s,c as e,o as n,ae as t}from"./chunks/framework.Dh1jimFm.js";const u=JSON.parse('{"title":"Writing Effective Test Cases","description":"","frontmatter":{},"headers":[],"relativePath":"guides/writing-test-cases.md","filePath":"guides/writing-test-cases.md"}'),i={name:"guides/writing-test-cases.md"};function p(o,a,l,c,r,d){return n(),e("div",null,a[0]||(a[0]=[t(`<h1 id="writing-effective-test-cases" tabindex="-1">Writing Effective Test Cases <a class="header-anchor" href="#writing-effective-test-cases" aria-label="Permalink to &quot;Writing Effective Test Cases&quot;">​</a></h1><p>This guide provides best practices and examples for writing effective test cases with the Factifai Agent Suite. Since Factifai uses natural language processing to interpret your test instructions, the way you write your test cases significantly impacts their execution quality and reliability.</p><h2 id="understanding-how-factifai-interprets-test-cases" tabindex="-1">Understanding How Factifai Interprets Test Cases <a class="header-anchor" href="#understanding-how-factifai-interprets-test-cases" aria-label="Permalink to &quot;Understanding How Factifai Interprets Test Cases&quot;">​</a></h2><p>Factifai Agent uses Large Language Models (LLMs) to interpret your natural language instructions and convert them into executable steps. Understanding this process helps you write more effective test cases:</p><ol><li><strong>Parsing</strong> - The AI analyzes your instructions to identify actions, targets, and expected outcomes</li><li><strong>Step Identification</strong> - It breaks down complex instructions into discrete steps</li><li><strong>Element Recognition</strong> - It determines how to locate and interact with UI elements</li><li><strong>Verification Points</strong> - It identifies what needs to be verified after actions</li></ol><h2 id="key-principles-for-effective-test-cases" tabindex="-1">Key Principles for Effective Test Cases <a class="header-anchor" href="#key-principles-for-effective-test-cases" aria-label="Permalink to &quot;Key Principles for Effective Test Cases&quot;">​</a></h2><h3 id="_1-be-specific-and-clear" tabindex="-1">1. Be Specific and Clear <a class="header-anchor" href="#_1-be-specific-and-clear" aria-label="Permalink to &quot;1. Be Specific and Clear&quot;">​</a></h3><p>Provide clear, unambiguous instructions that leave no room for interpretation:</p><h4 id="good-example" tabindex="-1">Good Example: <a class="header-anchor" href="#good-example" aria-label="Permalink to &quot;Good Example:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Navigate to saucedemo.com, enter username &quot;standard_user&quot; and password &quot;secret_sauce&quot; in their respective fields, then click the Login button.</span></span></code></pre></div><h4 id="poor-example" tabindex="-1">Poor Example: <a class="header-anchor" href="#poor-example" aria-label="Permalink to &quot;Poor Example:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Go to the website and log in.</span></span></code></pre></div><h3 id="_2-include-verification-points" tabindex="-1">2. Include Verification Points <a class="header-anchor" href="#_2-include-verification-points" aria-label="Permalink to &quot;2. Include Verification Points&quot;">​</a></h3><p>Always specify what should be verified after actions:</p><h4 id="good-example-1" tabindex="-1">Good Example: <a class="header-anchor" href="#good-example-1" aria-label="Permalink to &quot;Good Example:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Click the &quot;Add to Cart&quot; button for the Sauce Labs Backpack, then verify that the cart icon shows &quot;1&quot; item.</span></span></code></pre></div><h4 id="poor-example-1" tabindex="-1">Poor Example: <a class="header-anchor" href="#poor-example-1" aria-label="Permalink to &quot;Poor Example:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Add the product to the cart.</span></span></code></pre></div><h3 id="_3-use-descriptive-element-identifiers" tabindex="-1">3. Use Descriptive Element Identifiers <a class="header-anchor" href="#_3-use-descriptive-element-identifiers" aria-label="Permalink to &quot;3. Use Descriptive Element Identifiers&quot;">​</a></h3><p>Describe UI elements clearly so the AI can identify them:</p><h4 id="good-example-2" tabindex="-1">Good Example: <a class="header-anchor" href="#good-example-2" aria-label="Permalink to &quot;Good Example:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Click the blue &quot;Checkout&quot; button at the bottom of the cart page.</span></span></code></pre></div><h4 id="poor-example-2" tabindex="-1">Poor Example: <a class="header-anchor" href="#poor-example-2" aria-label="Permalink to &quot;Poor Example:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Click checkout.</span></span></code></pre></div><h3 id="_4-structure-complex-flows-logically" tabindex="-1">4. Structure Complex Flows Logically <a class="header-anchor" href="#_4-structure-complex-flows-logically" aria-label="Permalink to &quot;4. Structure Complex Flows Logically&quot;">​</a></h3><p>Break down complex workflows into clear, sequential steps:</p><h4 id="good-example-3" tabindex="-1">Good Example: <a class="header-anchor" href="#good-example-3" aria-label="Permalink to &quot;Good Example:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. Navigate to saucedemo.com</span></span>
<span class="line"><span>2. Login with username &quot;standard_user&quot; and password &quot;secret_sauce&quot;</span></span>
<span class="line"><span>3. Add the Sauce Labs Backpack to the cart</span></span>
<span class="line"><span>4. Navigate to the cart page</span></span>
<span class="line"><span>5. Click the Checkout button</span></span>
<span class="line"><span>6. Fill in First Name: &quot;John&quot;, Last Name: &quot;Doe&quot;, Zip Code: &quot;12345&quot;</span></span>
<span class="line"><span>7. Click Continue</span></span>
<span class="line"><span>8. Verify the item name and price on the checkout overview page</span></span>
<span class="line"><span>9. Click Finish</span></span>
<span class="line"><span>10. Verify the &quot;Thank you for your order&quot; message appears</span></span></code></pre></div><h4 id="poor-example-3" tabindex="-1">Poor Example: <a class="header-anchor" href="#poor-example-3" aria-label="Permalink to &quot;Poor Example:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Test the checkout process on saucedemo.com</span></span></code></pre></div><h3 id="_5-specify-wait-conditions-when-needed" tabindex="-1">5. Specify Wait Conditions When Needed <a class="header-anchor" href="#_5-specify-wait-conditions-when-needed" aria-label="Permalink to &quot;5. Specify Wait Conditions When Needed&quot;">​</a></h3><p>Explicitly mention when the test should wait for something to happen:</p><h4 id="good-example-4" tabindex="-1">Good Example: <a class="header-anchor" href="#good-example-4" aria-label="Permalink to &quot;Good Example:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Click the &quot;Submit&quot; button and wait for the confirmation message to appear.</span></span></code></pre></div><h4 id="poor-example-4" tabindex="-1">Poor Example: <a class="header-anchor" href="#poor-example-4" aria-label="Permalink to &quot;Poor Example:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Click submit and check for confirmation.</span></span></code></pre></div><h2 id="test-case-templates" tabindex="-1">Test Case Templates <a class="header-anchor" href="#test-case-templates" aria-label="Permalink to &quot;Test Case Templates&quot;">​</a></h2><h3 id="basic-navigation-and-verification" tabindex="-1">Basic Navigation and Verification <a class="header-anchor" href="#basic-navigation-and-verification" aria-label="Permalink to &quot;Basic Navigation and Verification&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>**Objective:** Verify [feature/functionality]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**Test Steps:**</span></span>
<span class="line"><span>1. **Navigate to [URL]**</span></span>
<span class="line"><span>   * **Expected:** [Page/element] loads successfully</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. **[Action to perform]**</span></span>
<span class="line"><span>   * **Action:** [Detailed description of the action]</span></span>
<span class="line"><span>   * **Expected:** [Expected outcome]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. **Verify [condition]**</span></span>
<span class="line"><span>   * **Expected:** [Detailed description of what should be verified]</span></span></code></pre></div><h3 id="login-flow" tabindex="-1">Login Flow <a class="header-anchor" href="#login-flow" aria-label="Permalink to &quot;Login Flow&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>**Objective:** Verify user login functionality</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**Test Steps:**</span></span>
<span class="line"><span>1. **Navigate to [login page URL]**</span></span>
<span class="line"><span>   * **Expected:** Login page loads with username and password fields visible</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. **Enter credentials**</span></span>
<span class="line"><span>   * **Action:** Enter &quot;[username]&quot; in the username field</span></span>
<span class="line"><span>   * **Action:** Enter &quot;[password]&quot; in the password field</span></span>
<span class="line"><span>   * **Action:** Click the Login button</span></span>
<span class="line"><span>   * **Expected:** User is redirected to the dashboard/home page</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. **Verify successful login**</span></span>
<span class="line"><span>   * **Expected:** User&#39;s name/account information is displayed</span></span>
<span class="line"><span>   * **Expected:** Logout option is available</span></span></code></pre></div><h3 id="form-submission" tabindex="-1">Form Submission <a class="header-anchor" href="#form-submission" aria-label="Permalink to &quot;Form Submission&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>**Objective:** Verify form submission functionality</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**Test Steps:**</span></span>
<span class="line"><span>1. **Navigate to [form page URL]**</span></span>
<span class="line"><span>   * **Expected:** Form loads with all required fields</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. **Fill in form fields**</span></span>
<span class="line"><span>   * **Action:** Enter &quot;[value1]&quot; in [field1]</span></span>
<span class="line"><span>   * **Action:** Enter &quot;[value2]&quot; in [field2]</span></span>
<span class="line"><span>   * **Action:** Select &quot;[option]&quot; from [dropdown]</span></span>
<span class="line"><span>   * **Action:** Check the [checkbox] option</span></span>
<span class="line"><span>   * **Expected:** All fields accept input correctly</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. **Submit the form**</span></span>
<span class="line"><span>   * **Action:** Click the Submit button</span></span>
<span class="line"><span>   * **Expected:** Form submission is processed</span></span>
<span class="line"><span></span></span>
<span class="line"><span>4. **Verify submission result**</span></span>
<span class="line"><span>   * **Expected:** Success message &quot;[expected message]&quot; is displayed</span></span>
<span class="line"><span>   * **Expected:** Submitted data is correctly reflected in [location]</span></span></code></pre></div><h2 id="examples-for-different-testing-scenarios" tabindex="-1">Examples for Different Testing Scenarios <a class="header-anchor" href="#examples-for-different-testing-scenarios" aria-label="Permalink to &quot;Examples for Different Testing Scenarios&quot;">​</a></h2><h3 id="e-commerce-product-search-and-filter" tabindex="-1">E-commerce Product Search and Filter <a class="header-anchor" href="#e-commerce-product-search-and-filter" aria-label="Permalink to &quot;E-commerce Product Search and Filter&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>**Objective:** Verify product search and filter functionality</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**Test Steps:**</span></span>
<span class="line"><span>1. **Navigate to example-shop.com**</span></span>
<span class="line"><span>   * **Expected:** Homepage loads successfully</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. **Search for a product**</span></span>
<span class="line"><span>   * **Action:** Enter &quot;wireless headphones&quot; in the search box and press Enter</span></span>
<span class="line"><span>   * **Expected:** Search results page shows products related to wireless headphones</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. **Apply price filter**</span></span>
<span class="line"><span>   * **Action:** Click on the &quot;Price&quot; filter dropdown</span></span>
<span class="line"><span>   * **Action:** Select the &quot;$50-$100&quot; price range</span></span>
<span class="line"><span>   * **Expected:** Results are filtered to show only products in the $50-$100 range</span></span>
<span class="line"><span></span></span>
<span class="line"><span>4. **Sort results**</span></span>
<span class="line"><span>   * **Action:** Click on the &quot;Sort by&quot; dropdown</span></span>
<span class="line"><span>   * **Action:** Select &quot;Customer Rating&quot;</span></span>
<span class="line"><span>   * **Expected:** Products are sorted by customer rating from highest to lowest</span></span>
<span class="line"><span></span></span>
<span class="line"><span>5. **Verify filter functionality**</span></span>
<span class="line"><span>   * **Expected:** All displayed products are wireless headphones</span></span>
<span class="line"><span>   * **Expected:** All displayed products have prices between $50 and $100</span></span>
<span class="line"><span>   * **Expected:** Products are sorted by customer rating</span></span></code></pre></div><h3 id="form-validation-testing" tabindex="-1">Form Validation Testing <a class="header-anchor" href="#form-validation-testing" aria-label="Permalink to &quot;Form Validation Testing&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>**Objective:** Verify form validation for a registration form</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**Test Steps:**</span></span>
<span class="line"><span>1. **Navigate to example.com/register**</span></span>
<span class="line"><span>   * **Expected:** Registration form loads with all required fields</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. **Test empty submission**</span></span>
<span class="line"><span>   * **Action:** Leave all fields empty and click the Register button</span></span>
<span class="line"><span>   * **Expected:** Form shows validation errors for required fields</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. **Test invalid email format**</span></span>
<span class="line"><span>   * **Action:** Enter &quot;John&quot; in the Name field</span></span>
<span class="line"><span>   * **Action:** Enter &quot;invalid-email&quot; in the Email field</span></span>
<span class="line"><span>   * **Action:** Enter &quot;Password123!&quot; in the Password field</span></span>
<span class="line"><span>   * **Action:** Click the Register button</span></span>
<span class="line"><span>   * **Expected:** Form shows validation error for the email field</span></span>
<span class="line"><span></span></span>
<span class="line"><span>4. **Test password strength requirements**</span></span>
<span class="line"><span>   * **Action:** Enter &quot;John&quot; in the Name field</span></span>
<span class="line"><span>   * **Action:** Enter &quot;john@example.com&quot; in the Email field</span></span>
<span class="line"><span>   * **Action:** Enter &quot;weak&quot; in the Password field</span></span>
<span class="line"><span>   * **Action:** Click the Register button</span></span>
<span class="line"><span>   * **Expected:** Form shows validation error for password strength</span></span>
<span class="line"><span></span></span>
<span class="line"><span>5. **Test successful submission**</span></span>
<span class="line"><span>   * **Action:** Enter &quot;John&quot; in the Name field</span></span>
<span class="line"><span>   * **Action:** Enter &quot;john@example.com&quot; in the Email field</span></span>
<span class="line"><span>   * **Action:** Enter &quot;StrongPassword123!&quot; in the Password field</span></span>
<span class="line"><span>   * **Action:** Click the Register button</span></span>
<span class="line"><span>   * **Expected:** Registration is successful</span></span>
<span class="line"><span>   * **Expected:** Confirmation message or redirect to login page occurs</span></span></code></pre></div><h3 id="responsive-design-testing" tabindex="-1">Responsive Design Testing <a class="header-anchor" href="#responsive-design-testing" aria-label="Permalink to &quot;Responsive Design Testing&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>**Objective:** Verify responsive behavior of a website</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**Test Steps:**</span></span>
<span class="line"><span>1. **Navigate to example.com**</span></span>
<span class="line"><span>   * **Expected:** Website loads successfully</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. **Test desktop layout**</span></span>
<span class="line"><span>   * **Action:** Set viewport to 1920x1080</span></span>
<span class="line"><span>   * **Expected:** Navigation menu is displayed horizontally</span></span>
<span class="line"><span>   * **Expected:** All content is properly aligned and visible</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. **Test tablet layout**</span></span>
<span class="line"><span>   * **Action:** Set viewport to 768x1024</span></span>
<span class="line"><span>   * **Expected:** Navigation may collapse into a hamburger menu</span></span>
<span class="line"><span>   * **Expected:** Content adjusts to fit the narrower screen</span></span>
<span class="line"><span>   * **Expected:** No horizontal scrolling is required</span></span>
<span class="line"><span></span></span>
<span class="line"><span>4. **Test mobile layout**</span></span>
<span class="line"><span>   * **Action:** Set viewport to 375x667</span></span>
<span class="line"><span>   * **Expected:** Navigation is collapsed into a hamburger menu</span></span>
<span class="line"><span>   * **Expected:** Content is stacked vertically</span></span>
<span class="line"><span>   * **Expected:** Text is readable without zooming</span></span>
<span class="line"><span>   * **Expected:** All interactive elements are easily tappable</span></span></code></pre></div><h2 id="common-challenges-and-solutions" tabindex="-1">Common Challenges and Solutions <a class="header-anchor" href="#common-challenges-and-solutions" aria-label="Permalink to &quot;Common Challenges and Solutions&quot;">​</a></h2><h3 id="challenge-element-not-found" tabindex="-1">Challenge: Element Not Found <a class="header-anchor" href="#challenge-element-not-found" aria-label="Permalink to &quot;Challenge: Element Not Found&quot;">​</a></h3><p>If Factifai has trouble finding elements, be more descriptive:</p><h4 id="solution" tabindex="-1">Solution: <a class="header-anchor" href="#solution" aria-label="Permalink to &quot;Solution:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Click the &quot;Add to Cart&quot; button (blue button with shopping cart icon) below the product description.</span></span></code></pre></div><h3 id="challenge-timing-issues" tabindex="-1">Challenge: Timing Issues <a class="header-anchor" href="#challenge-timing-issues" aria-label="Permalink to &quot;Challenge: Timing Issues&quot;">​</a></h3><p>If actions are happening too quickly or slowly:</p><h4 id="solution-1" tabindex="-1">Solution: <a class="header-anchor" href="#solution-1" aria-label="Permalink to &quot;Solution:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Click the &quot;Submit&quot; button and wait up to 10 seconds for the confirmation message to appear.</span></span></code></pre></div><h3 id="challenge-dynamic-content" tabindex="-1">Challenge: Dynamic Content <a class="header-anchor" href="#challenge-dynamic-content" aria-label="Permalink to &quot;Challenge: Dynamic Content&quot;">​</a></h3><p>For pages with dynamic content:</p><h4 id="solution-2" tabindex="-1">Solution: <a class="header-anchor" href="#solution-2" aria-label="Permalink to &quot;Solution:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Search for &quot;headphones&quot; and verify that at least 3 product results appear on the page.</span></span></code></pre></div><h3 id="challenge-complex-verification" tabindex="-1">Challenge: Complex Verification <a class="header-anchor" href="#challenge-complex-verification" aria-label="Permalink to &quot;Challenge: Complex Verification&quot;">​</a></h3><p>For complex verification needs:</p><h4 id="solution-3" tabindex="-1">Solution: <a class="header-anchor" href="#solution-3" aria-label="Permalink to &quot;Solution:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>After submitting the form, verify that:</span></span>
<span class="line"><span>1. A success message appears at the top of the page</span></span>
<span class="line"><span>2. The user&#39;s name appears in the account section</span></span>
<span class="line"><span>3. A confirmation email is sent to the user&#39;s email address</span></span></code></pre></div><h2 id="best-practices-for-test-organization" tabindex="-1">Best Practices for Test Organization <a class="header-anchor" href="#best-practices-for-test-organization" aria-label="Permalink to &quot;Best Practices for Test Organization&quot;">​</a></h2><h3 id="group-related-tests" tabindex="-1">Group Related Tests <a class="header-anchor" href="#group-related-tests" aria-label="Permalink to &quot;Group Related Tests&quot;">​</a></h3><p>Organize related tests together for better maintainability:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>**Test Suite: User Authentication**</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**Test Case 1: Successful Login**</span></span>
<span class="line"><span>[Test steps...]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**Test Case 2: Failed Login - Incorrect Password**</span></span>
<span class="line"><span>[Test steps...]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**Test Case 3: Failed Login - User Not Found**</span></span>
<span class="line"><span>[Test steps...]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**Test Case 4: Password Reset**</span></span>
<span class="line"><span>[Test steps...]</span></span></code></pre></div><h3 id="use-consistent-formatting" tabindex="-1">Use Consistent Formatting <a class="header-anchor" href="#use-consistent-formatting" aria-label="Permalink to &quot;Use Consistent Formatting&quot;">​</a></h3><p>Maintain consistent formatting across all test cases:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>**Objective:** [Clear statement of what is being tested]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**Preconditions:** [Any required setup or conditions]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**Test Steps:**</span></span>
<span class="line"><span>1. **[Action description]**</span></span>
<span class="line"><span>   * **Action:** [Detailed action]</span></span>
<span class="line"><span>   * **Expected:** [Expected outcome]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. **[Next action description]**</span></span>
<span class="line"><span>   * **Action:** [Detailed action]</span></span>
<span class="line"><span>   * **Expected:** [Expected outcome]</span></span></code></pre></div><h3 id="include-test-data" tabindex="-1">Include Test Data <a class="header-anchor" href="#include-test-data" aria-label="Permalink to &quot;Include Test Data&quot;">​</a></h3><p>Clearly specify test data to make tests more reproducible:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>**Test Data:**</span></span>
<span class="line"><span>- Username: test_user_123</span></span>
<span class="line"><span>- Password: Test@123</span></span>
<span class="line"><span>- Product ID: PRD-12345</span></span>
<span class="line"><span>- Search Term: &quot;wireless earbuds&quot;</span></span></code></pre></div><h2 id="troubleshooting-tips" tabindex="-1">Troubleshooting Tips <a class="header-anchor" href="#troubleshooting-tips" aria-label="Permalink to &quot;Troubleshooting Tips&quot;">​</a></h2><p>If your test cases aren&#39;t executing as expected, try these troubleshooting tips:</p><ol><li><strong>Be More Explicit</strong> - Add more details about elements and actions</li><li><strong>Add Verification Points</strong> - Ensure each action has a clear expected outcome</li><li><strong>Break Down Complex Steps</strong> - Split complex instructions into smaller, simpler steps</li><li><strong>Use Descriptive Element Identifiers</strong> - Include text, position, or appearance details</li><li><strong>Add Wait Conditions</strong> - Explicitly state when to wait for elements or state changes</li></ol><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><p>Now that you understand how to write effective test cases, you might want to explore:</p><ul><li><a href="/guides/setup-test-project.html">Setting Up a Test Project</a> - Create a structured test project</li><li><a href="/guides/ci-cd-integration.html">CI/CD Integration</a> - Integrate your tests with CI/CD pipelines</li><li><a href="/features/test-parsing.html">Test Parsing</a> - Learn more about how Factifai parses your test instructions</li></ul>`,83)]))}const g=s(i,[["render",p]]);export{u as __pageData,g as default};
