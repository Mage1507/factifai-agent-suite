import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.DlMbXW4x.js";const c=JSON.parse('{"title":"Playwright Core","description":"","frontmatter":{},"headers":[],"relativePath":"tools/playwright-core/index.md","filePath":"tools/playwright-core/index.md"}'),n={name:"tools/playwright-core/index.md"};function l(h,s,r,o,p,k){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="playwright-core" tabindex="-1">Playwright Core <a class="header-anchor" href="#playwright-core" aria-label="Permalink to &quot;Playwright Core&quot;">​</a></h1><p>Playwright Core is a powerful wrapper around the Playwright browser automation library, specifically designed for Large Language Models (LLMs) to control web browsers. This package enhances the capabilities of the Factifai Agent Suite by providing an interaction system that&#39;s optimized for AI models.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Playwright Core offers simplified browser control, intelligent element detection, and rich visual debugging tools that make browser automation more reliable and easier to troubleshoot. It serves as the browser automation engine for Factifai Agent, providing a coordinate-based approach that allows AI models to control browsers without needing complex DOM selectors.</p><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ul><li><strong>Enhanced Browser Control</strong>: Session-based browser management with improved stability</li><li><strong>Smart Element Detection</strong>: Automatic identification of interactive page elements</li><li><strong>Visual Debugging Tools</strong>: Visualization of detected elements with numbered overlays</li><li><strong>Simplified API</strong>: High-level functions that abstract away Playwright complexity</li><li><strong>LLM-friendly Interface</strong>: Streamlined coordinate-based approach optimized for AI models</li></ul><h2 id="core-capabilities" tabindex="-1">Core Capabilities <a class="header-anchor" href="#core-capabilities" aria-label="Permalink to &quot;Core Capabilities&quot;">​</a></h2><h3 id="session-management" tabindex="-1">Session Management <a class="header-anchor" href="#session-management" aria-label="Permalink to &quot;Session Management&quot;">​</a></h3><p>Playwright Core uses a session-based approach to manage browser instances, allowing multiple concurrent browser sessions with isolated contexts.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get a browser session</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sessionId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`test-\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Date</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BrowserService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sessionId);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Close a session when done</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BrowserService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closePage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sessionId);</span></span></code></pre></div><h3 id="visual-element-detection" tabindex="-1">Visual Element Detection <a class="header-anchor" href="#visual-element-detection" aria-label="Permalink to &quot;Visual Element Detection&quot;">​</a></h3><p>One of the most powerful features is the ability to automatically detect interactive elements on a page and visualize them with numbered overlays.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Mark all interactive elements with numbered boxes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markVisibleElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sessionId);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Take a screenshot with marked elements</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screenshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">takeMarkedScreenshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sessionId);</span></span></code></pre></div><h3 id="coordinate-based-interaction" tabindex="-1">Coordinate-Based Interaction <a class="header-anchor" href="#coordinate-based-interaction" aria-label="Permalink to &quot;Coordinate-Based Interaction&quot;">​</a></h3><p>Instead of relying on complex DOM selectors, Playwright Core uses a coordinate-based approach for interactions, making it ideal for AI models.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Click at specific coordinates</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sessionId, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Type text (after clicking on an input field)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sessionId, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="screenshot-tools" tabindex="-1">Screenshot Tools <a class="header-anchor" href="#screenshot-tools" aria-label="Permalink to &quot;Screenshot Tools&quot;">​</a></h3><p>Capture screenshots with optional element highlighting for debugging and documentation.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Take a regular screenshot</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screenshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">takeScreenshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sessionId);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Take a screenshot with marked elements</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> markedScreenshot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">takeMarkedScreenshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sessionId);</span></span></code></pre></div><h2 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h2><h3 id="browserservice" tabindex="-1">BrowserService <a class="header-anchor" href="#browserservice" aria-label="Permalink to &quot;BrowserService&quot;">​</a></h3><p>The main service for managing browser sessions and interactions.</p><ul><li><code>getInstance()</code>: Get the singleton instance of BrowserService</li><li><code>getPage(sessionId)</code>: Get the active page for a session</li><li><code>takeScreenshot(sessionId, minWaitMs?)</code>: Capture a screenshot</li><li><code>captureScreenshotAndInfer(sessionId)</code>: Capture screenshot with page element data</li><li><code>getAllPageElements(sessionId)</code>: Get all clickable and input elements</li><li><code>takeMarkedScreenshot(sessionId, options?)</code>: Take screenshot with marked elements</li><li><code>closePage(sessionId)</code>: Close a session</li><li><code>closeAll()</code>: Close all sessions</li></ul><h3 id="navigation-functions" tabindex="-1">Navigation Functions <a class="header-anchor" href="#navigation-functions" aria-label="Permalink to &quot;Navigation Functions&quot;">​</a></h3><ul><li><code>navigate(sessionId, url, options?)</code>: Navigate to a URL</li><li><code>getCurrentUrl(sessionId)</code>: Get the current page URL</li><li><code>reload(sessionId)</code>: Reload the current page</li><li><code>goBack(sessionId)</code>: Navigate back in history</li><li><code>goForward(sessionId)</code>: Navigate forward in history</li><li><code>wait(sessionId, ms)</code>: Wait for a specified time</li></ul><h3 id="interaction-functions" tabindex="-1">Interaction Functions <a class="header-anchor" href="#interaction-functions" aria-label="Permalink to &quot;Interaction Functions&quot;">​</a></h3><ul><li><code>click(sessionId, coordinates, options?)</code>: Click at specific coordinates</li><li><code>type(sessionId, text, options?)</code>: Type text</li><li><code>clear(sessionId, coordinates?)</code>: Clear input field</li><li><code>scrollToNextChunk(sessionId)</code>: Scroll down one viewport</li><li><code>scrollToPrevChunk(sessionId)</code>: Scroll up one viewport</li></ul><h3 id="element-marking-functions" tabindex="-1">Element Marking Functions <a class="header-anchor" href="#element-marking-functions" aria-label="Permalink to &quot;Element Marking Functions&quot;">​</a></h3><ul><li><code>markVisibleElements(sessionId, options?)</code>: Mark elements with numbered boxes</li><li><code>removeElementMarkers(sessionId)</code>: Remove element markers</li></ul><h2 id="advanced-usage" tabindex="-1">Advanced Usage <a class="header-anchor" href="#advanced-usage" aria-label="Permalink to &quot;Advanced Usage&quot;">​</a></h2><h3 id="custom-element-marking" tabindex="-1">Custom Element Marking <a class="header-anchor" href="#custom-element-marking" aria-label="Permalink to &quot;Custom Element Marking&quot;">​</a></h3><p>You can customize how elements are marked on the page:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Mark interactive elements with custom colors</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markVisibleElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sessionId, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  boxColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  textColor: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;white&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  borderWidth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  elements: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, width: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, label: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Search Box&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="page-element-data" tabindex="-1">Page Element Data <a class="header-anchor" href="#page-element-data" aria-label="Permalink to &quot;Page Element Data&quot;">​</a></h3><p>Get detailed information about interactive elements on the page:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get detailed info about page elements</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> elements</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> browser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllPageElements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sessionId);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Found \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">elements</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} interactive elements:\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">elements.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`- \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tagName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} at (\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}, \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}), size: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">width</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}x\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">height</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="integration-with-factifai-agent" tabindex="-1">Integration with Factifai Agent <a class="header-anchor" href="#integration-with-factifai-agent" aria-label="Permalink to &quot;Integration with Factifai Agent&quot;">​</a></h2><p>Playwright Core is the browser automation engine that powers Factifai Agent. When you run a test with Factifai Agent, it:</p><ol><li>Parses your natural language instructions</li><li>Converts them into a series of steps</li><li>Uses Playwright Core to execute those steps in the browser</li><li>Captures screenshots and generates reports</li></ol><p>This separation of concerns allows Factifai Agent to focus on natural language processing and test orchestration, while Playwright Core handles the browser automation details.</p><h2 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h2><ul><li>Node.js 16+</li><li>Playwright (peer dependency)</li><li>Browser binaries (Chromium, Firefox, and/or WebKit)</li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install the package</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @presidio-dev/playwright-core</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># IMPORTANT: Install browser dependencies (required)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> playwright</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-deps</span></span></code></pre></div><p>The <code>npx playwright install --with-deps</code> command is crucial as it installs:</p><ul><li>Browser binaries (Chromium, Firefox, WebKit)</li><li>Required system dependencies for proper browser operation</li><li>Font packages and media codecs needed for complete rendering</li></ul><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li><a href="/factifai-agent-suite/getting-started/installation.html">Installation Guide</a></li><li><a href="/factifai-agent-suite/getting-started/quick-start.html">Quick Start Guide</a></li><li><a href="/factifai-agent-suite/tools/factifai-agent/">Factifai Agent</a></li><li><a href="/factifai-agent-suite/features/test-parsing.html">Test Parsing Feature</a></li><li><a href="/factifai-agent-suite/features/live-progress.html">Live Test Progress</a></li></ul>`,48)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
