import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"Factifai Agent","description":"","frontmatter":{},"headers":[],"relativePath":"tools/factifai-agent/index.md","filePath":"tools/factifai-agent/index.md"}'),n={name:"tools/factifai-agent/index.md"};function l(h,s,r,o,p,k){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="factifai-agent" tabindex="-1">Factifai Agent <a class="header-anchor" href="#factifai-agent" aria-label="Permalink to &quot;Factifai Agent&quot;">​</a></h1><p>Factifai Agent is a powerful CLI tool for AI-driven browser automation testing that integrates seamlessly into development and testing workflows and CI/CD pipelines. Leveraging Large Language Models (LLMs), it interprets natural language test instructions and executes them through a structured, reliable process.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Built on LangGraph and Playwright, Factifai Agent enables testers and developers to write test cases in plain English while maintaining precision and reproducibility. The tool provides rich CLI visualization of test progress with real-time feedback, making it ideal for both interactive use and automated testing environments.</p><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ul><li><strong>Natural Language Test Instructions</strong>: Write test cases in plain English</li><li><strong>LLM-Powered Test Interpretation</strong>: Automatically converts natural language to executable test steps</li><li><strong>CLI-First Design</strong>: Purpose-built as a command-line tool for both interactive use and automation</li><li><strong>CI/CD Pipeline Integration</strong>: Easily integrate into GitHub Actions, Jenkins, GitLab CI, and more</li><li><strong>Rich Progress Visualization</strong>: Beautiful terminal interfaces showing real-time test execution progress</li><li><strong>Playwright Integration</strong>: Leverages Playwright&#39;s robust browser automation capabilities</li><li><strong>LangGraph Architecture</strong>: Uses a directed state graph for reliable test execution flow</li><li><strong>Cross-Browser Support</strong>: Works across Chromium, Firefox, and WebKit</li><li><strong>Detailed Test Reporting</strong>: Generates comprehensive test execution reports</li><li><strong>Step-by-Step Verification</strong>: Validates each test step against expected outcomes</li><li><strong>Automatic Retry Mechanism</strong>: Intelligently retries failed steps</li><li><strong>Multiple LLM Providers</strong>: Supports OpenAI and AWS Bedrock</li></ul><h2 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h2><ul><li>Node.js 16+</li><li>Playwright with browsers (must be installed with <code>npx playwright install --with-deps</code>)</li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install globally</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @presidio-dev/factifai-agent</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install Playwright and dependencies</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> playwright</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --with-deps</span></span></code></pre></div><h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">​</a></h2><h3 id="with-openai" tabindex="-1">With OpenAI <a class="header-anchor" href="#with-openai" aria-label="Permalink to &quot;With OpenAI&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Set your API key (only needed once, persists across sessions)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OPENAI_API_KEY=your-api-key-here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run your test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --model</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openai</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Navigate to duckduckgo.com and search &#39;eagles&#39;&quot;</span></span></code></pre></div><h3 id="with-aws-bedrock" tabindex="-1">With AWS Bedrock <a class="header-anchor" href="#with-aws-bedrock" aria-label="Permalink to &quot;With AWS Bedrock&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Set your AWS credentials (only needed once, persists across sessions)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> AWS_ACCESS_KEY_ID=your-access-key-id</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> AWS_SECRET_ACCESS_KEY=your-secret-access-key</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> AWS_DEFAULT_REGION=us-west-2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run your test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --model</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bedrock</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Navigate to duckduckgo.com and search &#39;eagles&#39;&quot;</span></span></code></pre></div><h2 id="usage-guide" tabindex="-1">Usage Guide <a class="header-anchor" href="#usage-guide" aria-label="Permalink to &quot;Usage Guide&quot;">​</a></h2><h3 id="commands" tabindex="-1">Commands <a class="header-anchor" href="#commands" aria-label="Permalink to &quot;Commands&quot;">​</a></h3><h4 id="test-automation" tabindex="-1">Test Automation <a class="header-anchor" href="#test-automation" aria-label="Permalink to &quot;Test Automation&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run with test instructions in the command</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --model</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openai</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your test instructions&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run from a file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --model</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openai</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./examples/test-case.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># With custom session ID</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --model</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openai</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --session</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-test-123</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your test instruction&quot;</span></span></code></pre></div><h4 id="configuration-management" tabindex="-1">Configuration Management <a class="header-anchor" href="#configuration-management" aria-label="Permalink to &quot;Configuration Management&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Show current configuration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --show</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Set default model provider (persists across sessions)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --model</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openai</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Set individual configuration values (persists across sessions)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OPENAI_API_KEY=your-api-key</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OPENAI_MODEL=gpt-4.1</span></span></code></pre></div><h4 id="model-management" tabindex="-1">Model Management <a class="header-anchor" href="#model-management" aria-label="Permalink to &quot;Model Management&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># List all available models</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> models</span></span></code></pre></div><h3 id="cross-browser-compatibility-testing" tabindex="-1">Cross-Browser Compatibility Testing <a class="header-anchor" href="#cross-browser-compatibility-testing" aria-label="Permalink to &quot;Cross-Browser Compatibility Testing&quot;">​</a></h3><p>You can run the same test across different browsers to ensure consistent functionality:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Test with Firefox</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --browser</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firefox</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Verify that user registration works on our website&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Test with WebKit (Safari)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --browser</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webkit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Verify that user registration works on our website&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Test with Chromium (default)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Verify that user registration works on our website&quot;</span></span></code></pre></div><h3 id="test-file-format" tabindex="-1">Test File Format <a class="header-anchor" href="#test-file-format" aria-label="Permalink to &quot;Test File Format&quot;">​</a></h3><p>Create structured test files for complex scenarios:</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;">**Objective:**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Search on DuckDuckGo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;">**Test Steps:**</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">1.</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Navigate to duckduckgo.com**</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   *</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Expected:**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DuckDuckGo homepage loads</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">2.</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Search for &quot;eagles&quot;**</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   *</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Action:**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Type &quot;eagles&quot; in search box and press Enter</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   *</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Expected:**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Search results for &quot;eagles&quot; appear</span></span></code></pre></div><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>Factifai Agent uses a persistent configuration system that stores settings in <code>~/.factifai/config.json</code>. This ensures your settings are remembered across terminal sessions.</p><h3 id="setting-configuration-values" tabindex="-1">Setting Configuration Values <a class="header-anchor" href="#setting-configuration-values" aria-label="Permalink to &quot;Setting Configuration Values&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Model selection</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MODEL_PROVIDER=openai</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # &quot;openai&quot; | &quot;bedrock&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OPENAI_MODEL=gpt-4.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BEDROCK_MODEL=us.anthropic.claude-3-7-sonnet-20250219-v1:0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># API credentials</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OPENAI_API_KEY=your-api-key-here</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> AWS_DEFAULT_REGION=us-west-2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> AWS_ACCESS_KEY_ID=your-access-key-id</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> AWS_SECRET_ACCESS_KEY=your-secret-access-key</span></span></code></pre></div><h3 id="viewing-current-configuration" tabindex="-1">Viewing Current Configuration <a class="header-anchor" href="#viewing-current-configuration" aria-label="Permalink to &quot;Viewing Current Configuration&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Show all configuration values</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factifai-agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --show</span></span></code></pre></div><h2 id="supported-models" tabindex="-1">Supported Models <a class="header-anchor" href="#supported-models" aria-label="Permalink to &quot;Supported Models&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Provider</th><th>Configuration</th><th>Available Models</th></tr></thead><tbody><tr><td><strong>OpenAI</strong></td><td><code>OPENAI_API_KEY</code></td><td><code>gpt-4.1</code> (default)<br><code>gpt-4o</code></td></tr><tr><td><strong>AWS Bedrock</strong></td><td><code>AWS_ACCESS_KEY_ID</code><br><code>AWS_SECRET_ACCESS_KEY</code><br><code>AWS_DEFAULT_REGION</code></td><td><code>us.anthropic.claude-3-7-sonnet-20250219-v1:0</code> (default)<br><code>anthropic.claude-3-5-sonnet-20240620-v1:0</code></td></tr></tbody></table><h2 id="best-practices-for-test-creation" tabindex="-1">Best Practices for Test Creation <a class="header-anchor" href="#best-practices-for-test-creation" aria-label="Permalink to &quot;Best Practices for Test Creation&quot;">​</a></h2><h3 id="writing-effective-tests" tabindex="-1">Writing Effective Tests <a class="header-anchor" href="#writing-effective-tests" aria-label="Permalink to &quot;Writing Effective Tests&quot;">​</a></h3><ol><li><p><strong>Create Focused Tests</strong></p><ul><li>Keep tests small and focused on single user journeys</li><li>Test one feature or functionality at a time</li><li>Break complex workflows into separate test cases</li><li>Example: ✅ &quot;Check login functionality&quot; instead of ❌ &quot;Verify entire website works&quot;</li></ul></li><li><p><strong>Use Descriptive Language</strong></p><ul><li>Be specific about actions and targets</li><li>Include element identifiers when possible</li><li>Use clear, unambiguous instructions</li><li>Example: ✅ &quot;Type &#39;standard_user&#39; into the username field&quot; instead of ❌ &quot;enter username&quot;</li></ul></li><li><p><strong>Include Expected Outcomes</strong></p><ul><li>Always specify what success looks like</li><li>Include explicit verification points</li><li>Mention what elements or text should appear</li><li>Example: ✅ &quot;Verify that the account dashboard displays the username&quot;</li></ul></li><li><p><strong>Structure Your Test Instructions</strong></p><ul><li>Use numbered steps for complex scenarios</li><li>Group related actions together</li><li>Include setup and teardown steps when needed</li><li>Example: ✅ &quot;1. Navigate to login page, 2. Enter credentials, 3. Click submit, 4. Verify dashboard appears&quot;</li></ul></li></ol><h3 id="example-of-good-vs-poor-test-instructions" tabindex="-1">Example of Good vs. Poor Test Instructions <a class="header-anchor" href="#example-of-good-vs-poor-test-instructions" aria-label="Permalink to &quot;Example of Good vs. Poor Test Instructions&quot;">​</a></h3><h4 id="❌-poor-example" tabindex="-1">❌ Poor Example: <a class="header-anchor" href="#❌-poor-example" aria-label="Permalink to &quot;❌ Poor Example:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Test login at saucedemo site</span></span></code></pre></div><h4 id="✅-good-example" tabindex="-1">✅ Good Example: <a class="header-anchor" href="#✅-good-example" aria-label="Permalink to &quot;✅ Good Example:&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Test login functionality on saucedemo.com</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1. Navigate to https://www.saucedemo.com</span></span>
<span class="line"><span>2. Enter &quot;standard_user&quot; in the username field</span></span>
<span class="line"><span>3. Enter &quot;secret_sauce&quot; in the password field </span></span>
<span class="line"><span>4. Click the Login button</span></span>
<span class="line"><span>5. Verify that:</span></span>
<span class="line"><span>   - The inventory page loads</span></span>
<span class="line"><span>   - The shopping cart icon is visible</span></span>
<span class="line"><span>   - The hamburger menu is available in the top-left corner</span></span></code></pre></div><h2 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h2><p>Factifai Agent employs a robust LangGraph-based architecture:</p><ol><li><strong>Preprocessing Node</strong>: Formats and prepares the test instruction</li><li><strong>Parsing Node</strong>: Converts natural language to structured test steps</li><li><strong>Execution Node</strong>: Performs browser actions via Playwright</li><li><strong>Tracking Node</strong>: Monitors test progress and status</li><li><strong>Tool Node</strong>: Provides necessary tools for interaction</li><li><strong>Report Generation Node</strong>: Creates detailed test results</li></ol><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li><a href="/getting-started/installation.html">Installation Guide</a></li><li><a href="/getting-started/quick-start.html">Quick Start Guide</a></li><li><a href="/features/test-parsing.html">Test Parsing Feature</a></li><li><a href="/features/live-progress.html">Live Test Progress</a></li><li><a href="/features/cli-reports.html">CLI Reports</a></li><li><a href="/features/html-xml-reports.html">HTML &amp; XML Reports</a></li></ul>`,50)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
